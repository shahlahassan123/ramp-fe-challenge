{"ast":null,"code":"var _jsxFileName = \"/Users/shahlahassan/Downloads/ramp-fe-challenge 2/src/App.tsx\",\n    _s = $RefreshSig$();\n\n// import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\n// import { InputSelect } from \"./components/InputSelect\"\n// import { Instructions } from \"./components/Instructions\"\n// import { Transactions } from \"./components/Transactions\"\n// import { useEmployees } from \"./hooks/useEmployees\"\n// import { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\n// import { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\n// import { EMPTY_EMPLOYEE } from \"./utils/constants\"\n// import { Employee } from \"./utils/types\"\n// export function App() {\n//   const { data: employees, ...employeeUtils } = useEmployees()\n//   const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n//   const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n//   const [isLoading, setIsLoading] = useState(false)\n//   const transactions = useMemo(\n//     () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n//     [paginatedTransactions, transactionsByEmployee]\n//   )\n//   const loadAllTransactions = useCallback(async () => {\n//     setIsLoading(true)\n//     transactionsByEmployeeUtils.invalidateData()\n//     await employeeUtils.fetchAll()\n//     await paginatedTransactionsUtils.fetchAll()\n//     setIsLoading(false)\n//   }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n//   const loadTransactionsByEmployee = useCallback(\n//     async (employeeId: string) => {\n//       paginatedTransactionsUtils.invalidateData()\n//       await transactionsByEmployeeUtils.fetchById(employeeId)\n//     },\n//     [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n//   )\n//   useEffect(() => {\n//     if (employees === null && !employeeUtils.loading) {\n//       loadAllTransactions()\n//     }\n//   }, [employeeUtils.loading, employees, loadAllTransactions])\n//   return (\n//     <Fragment>\n//       <main className=\"MainContainer\">\n//         <Instructions />\n//         <hr className=\"RampBreak--l\" />\n//         <InputSelect<Employee>\n//           isLoading={isLoading}\n//           defaultValue={EMPTY_EMPLOYEE}\n//           items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n//           label=\"Filter by employee\"\n//           loadingLabel=\"Loading employees\"\n//           parseItem={(item) => ({\n//             value: item.id,\n//             label: `${item.firstName} ${item.lastName}`,\n//           })}\n//           onChange={async (newValue) => {\n//             if (newValue === null) {\n//               return\n//             }\n//             await loadTransactionsByEmployee(newValue.id)\n//           }}\n//         />\n//         <div className=\"RampBreak--l\" />\n//         <div className=\"RampGrid\">\n//           <Transactions transactions={transactions} />\n//           {transactions !== null && (\n//             <button\n//               className=\"RampButton\"\n//               disabled={paginatedTransactionsUtils.loading}\n//               onClick={async () => {\n//                 await loadAllTransactions()\n//               }}\n//             >\n//               View More\n//             </button>\n//           )}\n//         </div>\n//       </main>\n//     </Fragment>\n//   )\n// }\n//ALL EMPLOYEE\n// import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\n// import { InputSelect } from \"./components/InputSelect\"\n// import { Instructions } from \"./components/Instructions\"\n// import { Transactions } from \"./components/Transactions\"\n// import { useEmployees } from \"./hooks/useEmployees\"\n// import { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\n// import { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\n// import { EMPTY_EMPLOYEE } from \"./utils/constants\"\n// import { Employee } from \"./utils/types\"\n// export function App() {\n//   const { data: employees, ...employeeUtils } = useEmployees()\n//   const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n//   const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n//   const [isLoading, setIsLoading] = useState(false)\n//   const transactions = useMemo(\n//     () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n//     [paginatedTransactions, transactionsByEmployee]\n//   )\n//   const loadAllTransactions = useCallback(async () => {\n//     setIsLoading(true)\n//     transactionsByEmployeeUtils.invalidateData()\n//     await employeeUtils.fetchAll()\n//     await paginatedTransactionsUtils.fetchAll()\n//     setIsLoading(false)\n//   }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n//   const loadTransactionsByEmployee = useCallback(\n//     async (employeeId: string) => {\n//       paginatedTransactionsUtils.invalidateData()\n//       await transactionsByEmployeeUtils.fetchById(employeeId)\n//     },\n//     [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n//   )\n//   useEffect(() => {\n//     if (employees === null && !employeeUtils.loading) {\n//       loadAllTransactions()\n//     }\n//   }, [employeeUtils.loading, employees, loadAllTransactions])\n//   return (\n//     <Fragment>\n//       <main className=\"MainContainer\">\n//         <Instructions />\n//         <hr className=\"RampBreak--l\" />\n//         <InputSelect<Employee>\n//           isLoading={isLoading}\n//           defaultValue={EMPTY_EMPLOYEE}\n//           items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n//           label=\"Filter by employee\"\n//           loadingLabel=\"Loading employees\"\n//           parseItem={(item) => ({\n//             value: item.id,\n//             label: item === EMPTY_EMPLOYEE ? \"All Employees\" : `${item.firstName} ${item.lastName}`,\n//           })}\n//           onChange={async (newValue) => {\n//             if (newValue === null || newValue === EMPTY_EMPLOYEE) {\n//               await loadAllTransactions()\n//             } else {\n//               await loadTransactionsByEmployee(newValue.id)\n//             }\n//           }}\n//         />\n//         <div className=\"RampBreak--l\" />\n//         <div className=\"RampGrid\">\n//           <Transactions transactions={transactions} />\n//           {transactions !== null && (\n//             <button\n//               className=\"RampButton\"\n//               disabled={paginatedTransactionsUtils.loading}\n//               onClick={async () => {\n//                 await loadAllTransactions()\n//               }}\n//             >\n//               View More\n//             </button>\n//           )}\n//         </div>\n//       </main>\n//     </Fragment>\n//   )\n// }\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [allTransactions, setAllTransactions] = useState(null);\n  const transactions = useMemo(() => {\n    var _ref, _ref2;\n\n    return (_ref = (_ref2 = allTransactions !== null && allTransactions !== void 0 ? allTransactions : paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _ref2 !== void 0 ? _ref2 : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [allTransactions, paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    var _newTransactions$data;\n\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    const newTransactions = await paginatedTransactionsUtils.fetchAll();\n    setAllTransactions((_newTransactions$data = newTransactions === null || newTransactions === void 0 ? void 0 : newTransactions.data) !== null && _newTransactions$data !== void 0 ? _newTransactions$data : null);\n    setIsLoading(false);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadMoreTransactions = useCallback(async () => {\n    setIsLoading(true);\n    const newTransactions = await paginatedTransactionsUtils.fetchAll();\n    setAllTransactions(prev => {\n      var _newTransactions$data2;\n\n      return [...(prev !== null && prev !== void 0 ? prev : []), ...((_newTransactions$data2 = newTransactions === null || newTransactions === void 0 ? void 0 : newTransactions.data) !== null && _newTransactions$data2 !== void 0 ? _newTransactions$data2 : [])];\n    });\n    setIsLoading(false);\n  }, [paginatedTransactionsUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    const newTransactions = await transactionsByEmployeeUtils.fetchById(employeeId);\n    setAllTransactions(newTransactions !== null && newTransactions !== void 0 ? newTransactions : null);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: item === EMPTY_EMPLOYEE ? \"All Employees\" : `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null || newValue === EMPTY_EMPLOYEE) {\n            await loadAllTransactions();\n          } else {\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this), transactions !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await loadMoreTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"m7SYGIPjJS53AFXnFWtLeTp+MTA=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","allTransactions","setAllTransactions","transactions","loadAllTransactions","invalidateData","newTransactions","fetchAll","loadMoreTransactions","prev","loadTransactionsByEmployee","employeeId","fetchById","loading","item","value","id","label","firstName","lastName","newValue"],"sources":["/Users/shahlahassan/Downloads/ramp-fe-challenge 2/src/App.tsx"],"sourcesContent":["// import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\n// import { InputSelect } from \"./components/InputSelect\"\n// import { Instructions } from \"./components/Instructions\"\n// import { Transactions } from \"./components/Transactions\"\n// import { useEmployees } from \"./hooks/useEmployees\"\n// import { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\n// import { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\n// import { EMPTY_EMPLOYEE } from \"./utils/constants\"\n// import { Employee } from \"./utils/types\"\n\n// export function App() {\n//   const { data: employees, ...employeeUtils } = useEmployees()\n//   const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n//   const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n//   const [isLoading, setIsLoading] = useState(false)\n\n//   const transactions = useMemo(\n//     () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n//     [paginatedTransactions, transactionsByEmployee]\n//   )\n\n//   const loadAllTransactions = useCallback(async () => {\n//     setIsLoading(true)\n//     transactionsByEmployeeUtils.invalidateData()\n\n//     await employeeUtils.fetchAll()\n//     await paginatedTransactionsUtils.fetchAll()\n\n//     setIsLoading(false)\n//   }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n//   const loadTransactionsByEmployee = useCallback(\n//     async (employeeId: string) => {\n//       paginatedTransactionsUtils.invalidateData()\n//       await transactionsByEmployeeUtils.fetchById(employeeId)\n//     },\n//     [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n//   )\n\n//   useEffect(() => {\n//     if (employees === null && !employeeUtils.loading) {\n//       loadAllTransactions()\n//     }\n//   }, [employeeUtils.loading, employees, loadAllTransactions])\n\n//   return (\n//     <Fragment>\n//       <main className=\"MainContainer\">\n//         <Instructions />\n\n//         <hr className=\"RampBreak--l\" />\n\n//         <InputSelect<Employee>\n//           isLoading={isLoading}\n//           defaultValue={EMPTY_EMPLOYEE}\n//           items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n//           label=\"Filter by employee\"\n//           loadingLabel=\"Loading employees\"\n//           parseItem={(item) => ({\n//             value: item.id,\n//             label: `${item.firstName} ${item.lastName}`,\n//           })}\n//           onChange={async (newValue) => {\n//             if (newValue === null) {\n//               return\n//             }\n\n//             await loadTransactionsByEmployee(newValue.id)\n//           }}\n//         />\n\n//         <div className=\"RampBreak--l\" />\n\n//         <div className=\"RampGrid\">\n//           <Transactions transactions={transactions} />\n\n//           {transactions !== null && (\n//             <button\n//               className=\"RampButton\"\n//               disabled={paginatedTransactionsUtils.loading}\n//               onClick={async () => {\n//                 await loadAllTransactions()\n//               }}\n//             >\n//               View More\n//             </button>\n//           )}\n//         </div>\n//       </main>\n//     </Fragment>\n//   )\n// }\n\n//ALL EMPLOYEE\n// import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\n// import { InputSelect } from \"./components/InputSelect\"\n// import { Instructions } from \"./components/Instructions\"\n// import { Transactions } from \"./components/Transactions\"\n// import { useEmployees } from \"./hooks/useEmployees\"\n// import { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\n// import { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\n// import { EMPTY_EMPLOYEE } from \"./utils/constants\"\n// import { Employee } from \"./utils/types\"\n\n// export function App() {\n//   const { data: employees, ...employeeUtils } = useEmployees()\n//   const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n//   const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n//   const [isLoading, setIsLoading] = useState(false)\n\n//   const transactions = useMemo(\n//     () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n//     [paginatedTransactions, transactionsByEmployee]\n//   )\n\n//   const loadAllTransactions = useCallback(async () => {\n//     setIsLoading(true)\n//     transactionsByEmployeeUtils.invalidateData()\n\n//     await employeeUtils.fetchAll()\n//     await paginatedTransactionsUtils.fetchAll()\n\n//     setIsLoading(false)\n//   }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n//   const loadTransactionsByEmployee = useCallback(\n//     async (employeeId: string) => {\n//       paginatedTransactionsUtils.invalidateData()\n//       await transactionsByEmployeeUtils.fetchById(employeeId)\n//     },\n//     [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n//   )\n\n//   useEffect(() => {\n//     if (employees === null && !employeeUtils.loading) {\n//       loadAllTransactions()\n//     }\n//   }, [employeeUtils.loading, employees, loadAllTransactions])\n\n//   return (\n//     <Fragment>\n//       <main className=\"MainContainer\">\n//         <Instructions />\n\n//         <hr className=\"RampBreak--l\" />\n\n//         <InputSelect<Employee>\n//           isLoading={isLoading}\n//           defaultValue={EMPTY_EMPLOYEE}\n//           items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n//           label=\"Filter by employee\"\n//           loadingLabel=\"Loading employees\"\n//           parseItem={(item) => ({\n//             value: item.id,\n//             label: item === EMPTY_EMPLOYEE ? \"All Employees\" : `${item.firstName} ${item.lastName}`,\n//           })}\n//           onChange={async (newValue) => {\n//             if (newValue === null || newValue === EMPTY_EMPLOYEE) {\n//               await loadAllTransactions()\n//             } else {\n//               await loadTransactionsByEmployee(newValue.id)\n//             }\n//           }}\n//         />\n\n//         <div className=\"RampBreak--l\" />\n\n//         <div className=\"RampGrid\">\n//           <Transactions transactions={transactions} />\n\n//           {transactions !== null && (\n//             <button\n//               className=\"RampButton\"\n//               disabled={paginatedTransactionsUtils.loading}\n//               onClick={async () => {\n//                 await loadAllTransactions()\n//               }}\n//             >\n//               View More\n//             </button>\n//           )}\n//         </div>\n//       </main>\n//     </Fragment>\n//   )\n// }\n\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n  const [allTransactions, setAllTransactions] = useState<Transaction[] | null>(null)\n\n  const transactions = useMemo(\n    () => allTransactions ?? paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [allTransactions, paginatedTransactions, transactionsByEmployee]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    transactionsByEmployeeUtils.invalidateData()\n    const newTransactions = await paginatedTransactionsUtils.fetchAll()\n    setAllTransactions(newTransactions?.data ?? null)\n    setIsLoading(false)\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadMoreTransactions = useCallback(async () => {\n    setIsLoading(true)\n    const newTransactions = await paginatedTransactionsUtils.fetchAll()\n    setAllTransactions((prev) => [...(prev ?? []), ...(newTransactions?.data ?? [])])\n    setIsLoading(false)\n  }, [paginatedTransactionsUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      const newTransactions = await transactionsByEmployeeUtils.fetchById(employeeId)\n      setAllTransactions(newTransactions ?? null)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: item === EMPTY_EMPLOYEE ? \"All Employees\" : `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null || newValue === EMPTY_EMPLOYEE) {\n              await loadAllTransactions()\n            } else {\n              await loadTransactionsByEmployee(newValue.id)\n            }\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n\n          {transactions !== null && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await loadMoreTransactions()\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/shahlahassan/Downloads/ramp-fe-challenge 2/src/components/Transactions/TransactionPane.tsx\",\n    _s = $RefreshSig$();\n\n// import { useState } from \"react\"\n// import { InputCheckbox } from \"../InputCheckbox\"\n// import { TransactionPaneComponent } from \"./types\"\n// export const TransactionPane: TransactionPaneComponent = ({\n//   transaction,\n//   loading,\n//   setTransactionApproval: consumerSetTransactionApproval,\n// }) => {\n//   const [approved, setApproved] = useState(transaction.approved)\n//   const handleApprovalChange = async (newValue: boolean) => {\n//     await consumerSetTransactionApproval({\n//       transactionId: transaction.id,\n//       newValue,\n//     })\n//     setApproved(newValue)\n//   }\n//   return (\n//     <div className=\"RampPane\">\n//       <div className=\"RampPane--content\">\n//         <p className=\"RampText\">{transaction.merchant} </p>\n//         <b>{moneyFormatter.format(transaction.amount)}</b>\n//         <p className=\"RampText--hushed RampText--s\">\n//           {transaction.employee.firstName} {transaction.employee.lastName} - {transaction.date}\n//         </p>\n//       </div>\n//       <InputCheckbox\n//         id={transaction.id}\n//         checked={approved}\n//         disabled={loading}\n//         onChange={handleApprovalChange}\n//       />\n//     </div>\n//   )\n// }\n// const moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n//   style: \"currency\",\n//   currency: \"USD\",\n// })\nimport { useState } from \"react\";\nimport { InputCheckbox } from \"../InputCheckbox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionPane = _ref => {\n  _s();\n\n  let {\n    transaction,\n    loading,\n    setTransactionApproval: consumerSetTransactionApproval\n  } = _ref;\n  const [approved, setApproved] = useState(transaction.approved); //Handle approval status change\n\n  const handleApprovalChange = async newValue => {\n    await consumerSetTransactionApproval({\n      transactionId: transaction.id,\n      newValue\n    });\n    setApproved(newValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"RampPane\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampPane--content\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText\",\n        children: [transaction.merchant, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: moneyFormatter.format(transaction.amount)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText--hushed RampText--s\",\n        children: [transaction.employee.firstName, \" \", transaction.employee.lastName, \" - \", transaction.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputCheckbox, {\n      id: transaction.id,\n      checked: approved,\n      disabled: loading,\n      onChange: handleApprovalChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TransactionPane, \"KPAjtgwy0mvFAelnTZhq541SWIA=\");\n\n_c = TransactionPane;\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\"\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionPane\");","map":{"version":3,"names":["useState","InputCheckbox","TransactionPane","transaction","loading","setTransactionApproval","consumerSetTransactionApproval","approved","setApproved","handleApprovalChange","newValue","transactionId","id","merchant","moneyFormatter","format","amount","employee","firstName","lastName","date","Intl","NumberFormat","style","currency"],"sources":["/Users/shahlahassan/Downloads/ramp-fe-challenge 2/src/components/Transactions/TransactionPane.tsx"],"sourcesContent":["// import { useState } from \"react\"\n// import { InputCheckbox } from \"../InputCheckbox\"\n// import { TransactionPaneComponent } from \"./types\"\n\n// export const TransactionPane: TransactionPaneComponent = ({\n//   transaction,\n//   loading,\n//   setTransactionApproval: consumerSetTransactionApproval,\n// }) => {\n//   const [approved, setApproved] = useState(transaction.approved)\n\n//   const handleApprovalChange = async (newValue: boolean) => {\n//     await consumerSetTransactionApproval({\n//       transactionId: transaction.id,\n//       newValue,\n//     })\n//     setApproved(newValue)\n//   }\n\n//   return (\n//     <div className=\"RampPane\">\n//       <div className=\"RampPane--content\">\n//         <p className=\"RampText\">{transaction.merchant} </p>\n//         <b>{moneyFormatter.format(transaction.amount)}</b>\n//         <p className=\"RampText--hushed RampText--s\">\n//           {transaction.employee.firstName} {transaction.employee.lastName} - {transaction.date}\n//         </p>\n//       </div>\n//       <InputCheckbox\n//         id={transaction.id}\n//         checked={approved}\n//         disabled={loading}\n//         onChange={handleApprovalChange}\n//       />\n//     </div>\n//   )\n// }\n\n// const moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n//   style: \"currency\",\n//   currency: \"USD\",\n// })\n\nimport { useState } from \"react\"\nimport { InputCheckbox } from \"../InputCheckbox\"\nimport { TransactionPaneComponent } from \"./types\"\n\nexport const TransactionPane: TransactionPaneComponent = ({\n  transaction,\n  loading,\n  setTransactionApproval: consumerSetTransactionApproval,\n}) => {\n\n  const [approved, setApproved] = useState(transaction.approved)\n\n   //Handle approval status change\n  const handleApprovalChange = async (newValue: boolean) => {\n    await consumerSetTransactionApproval({\n      transactionId: transaction.id,\n      newValue,\n    })\n    setApproved(newValue)\n  }\n\n  return (\n    <div className=\"RampPane\">\n      <div className=\"RampPane--content\">\n        <p className=\"RampText\">{transaction.merchant} </p>\n        <b>{moneyFormatter.format(transaction.amount)}</b>\n        <p className=\"RampText--hushed RampText--s\">\n          {transaction.employee.firstName} {transaction.employee.lastName} - {transaction.date}\n        </p>\n      </div>\n      <InputCheckbox\n        id={transaction.id}\n        checked={approved}\n        disabled={loading}\n        onChange={handleApprovalChange}\n      />\n    </div>\n  )\n}\n\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n})\n"],"mappings":";;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,aAAT,QAA8B,kBAA9B;;AAGA,OAAO,MAAMC,eAAyC,GAAG,QAInD;EAAA;;EAAA,IAJoD;IACxDC,WADwD;IAExDC,OAFwD;IAGxDC,sBAAsB,EAAEC;EAHgC,CAIpD;EAEJ,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAACG,WAAW,CAACI,QAAb,CAAxC,CAFI,CAIH;;EACD,MAAME,oBAAoB,GAAG,MAAOC,QAAP,IAA6B;IACxD,MAAMJ,8BAA8B,CAAC;MACnCK,aAAa,EAAER,WAAW,CAACS,EADQ;MAEnCF;IAFmC,CAAD,CAApC;IAIAF,WAAW,CAACE,QAAD,CAAX;EACD,CAND;;EAQA,oBACE;IAAK,SAAS,EAAC,UAAf;IAAA,wBACE;MAAK,SAAS,EAAC,mBAAf;MAAA,wBACE;QAAG,SAAS,EAAC,UAAb;QAAA,WAAyBP,WAAW,CAACU,QAArC;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA,UAAIC,cAAc,CAACC,MAAf,CAAsBZ,WAAW,CAACa,MAAlC;MAAJ;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QAAG,SAAS,EAAC,8BAAb;QAAA,WACGb,WAAW,CAACc,QAAZ,CAAqBC,SADxB,OACoCf,WAAW,CAACc,QAAZ,CAAqBE,QADzD,SACsEhB,WAAW,CAACiB,IADlF;MAAA;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAQE,QAAC,aAAD;MACE,EAAE,EAAEjB,WAAW,CAACS,EADlB;MAEE,OAAO,EAAEL,QAFX;MAGE,QAAQ,EAAEH,OAHZ;MAIE,QAAQ,EAAEK;IAJZ;MAAA;MAAA;MAAA;IAAA,QARF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAiBD,CAlCM;;GAAMP,e;;KAAAA,e;AAoCb,MAAMY,cAAc,GAAG,IAAIO,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;EACpDC,KAAK,EAAE,UAD6C;EAEpDC,QAAQ,EAAE;AAF0C,CAA/B,CAAvB"},"metadata":{},"sourceType":"module"}
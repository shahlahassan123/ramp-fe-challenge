{"ast":null,"code":"var _jsxFileName = \"/Users/shahlahassan/Downloads/ramp-fe-challenge 2/src/components/InputSelect/index.tsx\",\n    _s2 = $RefreshSig$();\n\nimport Downshift from \"downshift\";\nimport { useCallback, useState } from \"react\";\nimport classNames from \"classnames\";\nimport { DropdownPosition, GetDropdownPositionFn, InputSelectOnChange, InputSelectProps } from \"./types\"; // export function InputSelect<TItem>({\n//   label,\n//   defaultValue,\n//   onChange: consumerOnChange,\n//   items,\n//   parseItem,\n//   isLoading,\n//   loadingLabel,\n// }: InputSelectProps<TItem>) {\n//   const [selectedValue, setSelectedValue] = useState<TItem | null>(defaultValue ?? null)\n//   const [dropdownPosition, setDropdownPosition] = useState<DropdownPosition>({\n//     top: 0,\n//     left: 0,\n//   })\n//   const onChange = useCallback<InputSelectOnChange<TItem>>(\n//     (selectedItem) => {\n//       if (selectedItem === null) {\n//         return\n//       }\n//       consumerOnChange(selectedItem)\n//       setSelectedValue(selectedItem)\n//     },\n//     [consumerOnChange]\n//   )\n//   return (\n//     <Downshift<TItem>\n//       id=\"RampSelect\"\n//       onChange={onChange}\n//       selectedItem={selectedValue}\n//       itemToString={(item) => (item ? parseItem(item).label : \"\")}\n//     >\n//       {({\n//         getItemProps,\n//         getLabelProps,\n//         getMenuProps,\n//         isOpen,\n//         highlightedIndex,\n//         selectedItem,\n//         getToggleButtonProps,\n//         inputValue,\n//       }) => {\n//         const toggleProps = getToggleButtonProps()\n//         const parsedSelectedItem = selectedItem === null ? null : parseItem(selectedItem)\n//         return (\n//           <div className=\"RampInputSelect--root\">\n//             <label className=\"RampText--s RampText--hushed\" {...getLabelProps()}>\n//               {label}\n//             </label>\n//             <div className=\"RampBreak--xs\" />\n//             <div\n//               className=\"RampInputSelect--input\"\n//               onClick={(event) => {\n//                 setDropdownPosition(getDropdownPosition(event.target))\n//                 toggleProps.onClick(event)\n//               }}\n//             >\n//               {inputValue}\n//             </div>\n//             <div\n//               className={classNames(\"RampInputSelect--dropdown-container\", {\n//                 \"RampInputSelect--dropdown-container-opened\": isOpen,\n//               })}\n//               {...getMenuProps()}\n//               style={{ top: dropdownPosition.top, left: dropdownPosition.left }}\n//             >\n//               {renderItems()}\n//             </div>\n//           </div>\n//         )\n//         function renderItems() {\n//           if (!isOpen) {\n//             return null\n//           }\n//           if (isLoading) {\n//             return <div className=\"RampInputSelect--dropdown-item\">{loadingLabel}...</div>\n//           }\n//           if (items.length === 0) {\n//             return <div className=\"RampInputSelect--dropdown-item\">No items</div>\n//           }\n//           return items.map((item, index) => {\n//             const parsedItem = parseItem(item)\n//             return (\n//               <div\n//                 key={parsedItem.value}\n//                 {...getItemProps({\n//                   key: parsedItem.value,\n//                   index,\n//                   item,\n//                   className: classNames(\"RampInputSelect--dropdown-item\", {\n//                     \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n//                     \"RampInputSelect--dropdown-item-selected\":\n//                       parsedSelectedItem?.value === parsedItem.value,\n//                   }),\n//                 })}\n//               >\n//                 {parsedItem.label}\n//               </div>\n//             )\n//           })\n//         }\n//       }}\n//     </Downshift>\n//   )\n// }\n// const getDropdownPosition: GetDropdownPositionFn = (target) => {\n//   if (target instanceof Element) {\n//     const { top, left } = target.getBoundingClientRect()\n//     const { scrollY } = window\n//     return {\n//       top: scrollY + top + 63,\n//       left,\n//     }\n//   }\n//   return { top: 0, left: 0 }\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function InputSelect(_ref) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  let {\n    label,\n    defaultValue,\n    onChange: consumerOnChange,\n    items,\n    parseItem,\n    isLoading,\n    loadingLabel\n  } = _ref;\n  const [selectedValue, setSelectedValue] = useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : null);\n  const [dropdownPosition, setDropdownPosition] = useState({\n    top: 0,\n    left: 0\n  });\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const onChange = useCallback(selectedItem => {\n    if (selectedItem === null) {\n      return;\n    }\n\n    consumerOnChange(selectedItem);\n    setSelectedValue(selectedItem);\n  }, [consumerOnChange]);\n  const updateDropdownPosition = useCallback(() => {\n    const target = document.querySelector('.RampInputSelect--input');\n\n    if (target) {\n      setDropdownPosition(getDropdownPosition(target));\n    }\n  }, []);\n  useEffect(() => {\n    if (isDropdownOpen) {\n      window.addEventListener('scroll', updateDropdownPosition);\n      window.addEventListener('resize', updateDropdownPosition);\n      updateDropdownPosition();\n    } else {\n      window.removeEventListener('scroll', updateDropdownPosition);\n      window.removeEventListener('resize', updateDropdownPosition);\n    }\n\n    return () => {\n      window.removeEventListener('scroll', updateDropdownPosition);\n      window.removeEventListener('resize', updateDropdownPosition);\n    };\n  }, [isDropdownOpen, updateDropdownPosition]);\n  return /*#__PURE__*/_jsxDEV(Downshift, {\n    id: \"RampSelect\",\n    onChange: onChange,\n    selectedItem: selectedValue,\n    itemToString: item => item ? parseItem(item).label : \"\",\n    children: _s(_ref2 => {\n      _s();\n\n      let {\n        getItemProps,\n        getLabelProps,\n        getMenuProps,\n        isOpen,\n        highlightedIndex,\n        selectedItem,\n        getToggleButtonProps,\n        inputValue\n      } = _ref2;\n      const toggleProps = getToggleButtonProps();\n      const parsedSelectedItem = selectedItem === null ? null : parseItem(selectedItem);\n      useEffect(() => {\n        setIsDropdownOpen(isOpen);\n      }, [isOpen]);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampInputSelect--root\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"RampText--s RampText--hushed\",\n          ...getLabelProps(),\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampBreak--xs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampInputSelect--input\",\n          onClick: event => {\n            setDropdownPosition(getDropdownPosition(event.target));\n            toggleProps.onClick(event);\n          },\n          children: inputValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classNames(\"RampInputSelect--dropdown-container\", {\n            \"RampInputSelect--dropdown-container-opened\": isOpen\n          }),\n          ...getMenuProps(),\n          style: {\n            top: dropdownPosition.top,\n            left: dropdownPosition.left\n          },\n          children: renderItems()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this);\n\n      function renderItems() {\n        if (!isOpen) {\n          return null;\n        }\n\n        if (isLoading) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"RampInputSelect--dropdown-item\",\n            children: [loadingLabel, \"...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 20\n          }, this);\n        }\n\n        if (items.length === 0) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"RampInputSelect--dropdown-item\",\n            children: \"No items\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 20\n          }, this);\n        }\n\n        return items.map((item, index) => {\n          const parsedItem = parseItem(item);\n          return /*#__PURE__*/_jsxDEV(\"div\", { ...getItemProps({\n              key: parsedItem.value,\n              index,\n              item,\n              className: classNames(\"RampInputSelect--dropdown-item\", {\n                \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n                \"RampInputSelect--dropdown-item-selected\": (parsedSelectedItem === null || parsedSelectedItem === void 0 ? void 0 : parsedSelectedItem.value) === parsedItem.value\n              })\n            }),\n            children: parsedItem.label\n          }, parsedItem.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 15\n          }, this);\n        });\n      }\n    }, \"OD7bBpZva5O2jO+Puf00hKivP7c=\")\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(InputSelect, \"I5XTBqkBFYiiuflVqwP59CsNU00=\");\n\n_c = InputSelect;\n\nconst getDropdownPosition = target => {\n  if (target instanceof Element) {\n    const {\n      top,\n      left,\n      height\n    } = target.getBoundingClientRect();\n    const {\n      scrollY\n    } = window;\n    return {\n      top: scrollY + top + height,\n      left\n    };\n  }\n\n  return {\n    top: 0,\n    left: 0\n  };\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"InputSelect\");","map":{"version":3,"names":["Downshift","useCallback","useState","classNames","DropdownPosition","GetDropdownPositionFn","InputSelectOnChange","InputSelectProps","InputSelect","label","defaultValue","onChange","consumerOnChange","items","parseItem","isLoading","loadingLabel","selectedValue","setSelectedValue","dropdownPosition","setDropdownPosition","top","left","isDropdownOpen","setIsDropdownOpen","selectedItem","updateDropdownPosition","target","document","querySelector","getDropdownPosition","useEffect","window","addEventListener","removeEventListener","item","getItemProps","getLabelProps","getMenuProps","isOpen","highlightedIndex","getToggleButtonProps","inputValue","toggleProps","parsedSelectedItem","event","onClick","renderItems","length","map","index","parsedItem","key","value","className","Element","height","getBoundingClientRect","scrollY"],"sources":["/Users/shahlahassan/Downloads/ramp-fe-challenge 2/src/components/InputSelect/index.tsx"],"sourcesContent":["import Downshift from \"downshift\"\nimport { useCallback, useState } from \"react\"\nimport classNames from \"classnames\"\nimport { DropdownPosition, GetDropdownPositionFn, InputSelectOnChange, InputSelectProps } from \"./types\"\n\n// export function InputSelect<TItem>({\n//   label,\n//   defaultValue,\n//   onChange: consumerOnChange,\n//   items,\n//   parseItem,\n//   isLoading,\n//   loadingLabel,\n// }: InputSelectProps<TItem>) {\n//   const [selectedValue, setSelectedValue] = useState<TItem | null>(defaultValue ?? null)\n//   const [dropdownPosition, setDropdownPosition] = useState<DropdownPosition>({\n//     top: 0,\n//     left: 0,\n//   })\n\n//   const onChange = useCallback<InputSelectOnChange<TItem>>(\n//     (selectedItem) => {\n//       if (selectedItem === null) {\n//         return\n//       }\n\n//       consumerOnChange(selectedItem)\n//       setSelectedValue(selectedItem)\n//     },\n//     [consumerOnChange]\n//   )\n\n//   return (\n//     <Downshift<TItem>\n//       id=\"RampSelect\"\n//       onChange={onChange}\n//       selectedItem={selectedValue}\n//       itemToString={(item) => (item ? parseItem(item).label : \"\")}\n//     >\n//       {({\n//         getItemProps,\n//         getLabelProps,\n//         getMenuProps,\n//         isOpen,\n//         highlightedIndex,\n//         selectedItem,\n//         getToggleButtonProps,\n//         inputValue,\n//       }) => {\n//         const toggleProps = getToggleButtonProps()\n//         const parsedSelectedItem = selectedItem === null ? null : parseItem(selectedItem)\n\n//         return (\n//           <div className=\"RampInputSelect--root\">\n//             <label className=\"RampText--s RampText--hushed\" {...getLabelProps()}>\n//               {label}\n//             </label>\n//             <div className=\"RampBreak--xs\" />\n//             <div\n//               className=\"RampInputSelect--input\"\n//               onClick={(event) => {\n//                 setDropdownPosition(getDropdownPosition(event.target))\n//                 toggleProps.onClick(event)\n//               }}\n//             >\n//               {inputValue}\n//             </div>\n\n//             <div\n//               className={classNames(\"RampInputSelect--dropdown-container\", {\n//                 \"RampInputSelect--dropdown-container-opened\": isOpen,\n//               })}\n//               {...getMenuProps()}\n//               style={{ top: dropdownPosition.top, left: dropdownPosition.left }}\n//             >\n//               {renderItems()}\n//             </div>\n//           </div>\n//         )\n\n//         function renderItems() {\n//           if (!isOpen) {\n//             return null\n//           }\n\n//           if (isLoading) {\n//             return <div className=\"RampInputSelect--dropdown-item\">{loadingLabel}...</div>\n//           }\n\n//           if (items.length === 0) {\n//             return <div className=\"RampInputSelect--dropdown-item\">No items</div>\n//           }\n\n//           return items.map((item, index) => {\n//             const parsedItem = parseItem(item)\n//             return (\n//               <div\n//                 key={parsedItem.value}\n//                 {...getItemProps({\n//                   key: parsedItem.value,\n//                   index,\n//                   item,\n//                   className: classNames(\"RampInputSelect--dropdown-item\", {\n//                     \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n//                     \"RampInputSelect--dropdown-item-selected\":\n//                       parsedSelectedItem?.value === parsedItem.value,\n//                   }),\n//                 })}\n//               >\n//                 {parsedItem.label}\n//               </div>\n//             )\n//           })\n//         }\n//       }}\n//     </Downshift>\n//   )\n// }\n\n// const getDropdownPosition: GetDropdownPositionFn = (target) => {\n//   if (target instanceof Element) {\n//     const { top, left } = target.getBoundingClientRect()\n//     const { scrollY } = window\n//     return {\n//       top: scrollY + top + 63,\n//       left,\n//     }\n//   }\n\n//   return { top: 0, left: 0 }\n// }\n\nexport function InputSelect<TItem>({\n  label,\n  defaultValue,\n  onChange: consumerOnChange,\n  items,\n  parseItem,\n  isLoading,\n  loadingLabel,\n}: InputSelectProps<TItem>) {\n  const [selectedValue, setSelectedValue] = useState<TItem | null>(defaultValue ?? null)\n  const [dropdownPosition, setDropdownPosition] = useState<DropdownPosition>({\n    top: 0,\n    left: 0,\n  })\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n\n  const onChange = useCallback<InputSelectOnChange<TItem>>(\n    (selectedItem) => {\n      if (selectedItem === null) {\n        return\n      }\n\n      consumerOnChange(selectedItem)\n      setSelectedValue(selectedItem)\n    },\n    [consumerOnChange]\n  )\n\n  const updateDropdownPosition = useCallback(() => {\n    const target = document.querySelector('.RampInputSelect--input');\n    if (target) {\n      setDropdownPosition(getDropdownPosition(target));\n    }\n  }, []);\n\n  useEffect(() => {\n    if (isDropdownOpen) {\n      window.addEventListener('scroll', updateDropdownPosition);\n      window.addEventListener('resize', updateDropdownPosition);\n      updateDropdownPosition();\n    } else {\n      window.removeEventListener('scroll', updateDropdownPosition);\n      window.removeEventListener('resize', updateDropdownPosition);\n    }\n\n    return () => {\n      window.removeEventListener('scroll', updateDropdownPosition);\n      window.removeEventListener('resize', updateDropdownPosition);\n    };\n  }, [isDropdownOpen, updateDropdownPosition]);\n\n  return (\n    <Downshift<TItem>\n      id=\"RampSelect\"\n      onChange={onChange}\n      selectedItem={selectedValue}\n      itemToString={(item) => (item ? parseItem(item).label : \"\")}\n    >\n      {({\n        getItemProps,\n        getLabelProps,\n        getMenuProps,\n        isOpen,\n        highlightedIndex,\n        selectedItem,\n        getToggleButtonProps,\n        inputValue,\n      }) => {\n        const toggleProps = getToggleButtonProps()\n        const parsedSelectedItem = selectedItem === null ? null : parseItem(selectedItem)\n\n        useEffect(() => {\n          setIsDropdownOpen(isOpen);\n        }, [isOpen]);\n\n        return (\n          <div className=\"RampInputSelect--root\">\n            <label className=\"RampText--s RampText--hushed\" {...getLabelProps()}>\n              {label}\n            </label>\n            <div className=\"RampBreak--xs\" />\n            <div\n              className=\"RampInputSelect--input\"\n              onClick={(event) => {\n                setDropdownPosition(getDropdownPosition(event.target))\n                toggleProps.onClick(event)\n              }}\n            >\n              {inputValue}\n            </div>\n\n            <div\n              className={classNames(\"RampInputSelect--dropdown-container\", {\n                \"RampInputSelect--dropdown-container-opened\": isOpen,\n              })}\n              {...getMenuProps()}\n              style={{ top: dropdownPosition.top, left: dropdownPosition.left }}\n            >\n              {renderItems()}\n            </div>\n          </div>\n        )\n\n        function renderItems() {\n          if (!isOpen) {\n            return null\n          }\n\n          if (isLoading) {\n            return <div className=\"RampInputSelect--dropdown-item\">{loadingLabel}...</div>\n          }\n\n          if (items.length === 0) {\n            return <div className=\"RampInputSelect--dropdown-item\">No items</div>\n          }\n\n          return items.map((item, index) => {\n            const parsedItem = parseItem(item)\n            return (\n              <div\n                key={parsedItem.value}\n                {...getItemProps({\n                  key: parsedItem.value,\n                  index,\n                  item,\n                  className: classNames(\"RampInputSelect--dropdown-item\", {\n                    \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n                    \"RampInputSelect--dropdown-item-selected\":\n                      parsedSelectedItem?.value === parsedItem.value,\n                  }),\n                })}\n              >\n                {parsedItem.label}\n              </div>\n            )\n          })\n        }\n      }}\n    </Downshift>\n  )\n}\n\nconst getDropdownPosition: GetDropdownPositionFn = (target) => {\n  if (target instanceof Element) {\n    const { top, left, height } = target.getBoundingClientRect()\n    const { scrollY } = window\n    return {\n      top: scrollY + top + height,\n      left,\n    }\n  }\n\n  return { top: 0, left: 0 }\n}\nexport type InputSelectItem = { label: string; value: string }\n\nexport type InputSelectProps<TItem> = {\n  label: string\n  defaultValue?: TItem | null\n  onChange: (value: TItem | null) => void\n  items: TItem[]\n  parseItem: (item: TItem) => InputSelectItem\n  isLoading?: boolean\n  loadingLabel: string\n}\n\nexport type DropdownPosition = {\n  top: number\n  left: number\n}\n\nexport type InputSelectOnChange<TItem> = (selectedItem: TItem | null) => void\n\nexport type GetDropdownPositionFn = (target: EventTarget) => DropdownPosition\n"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,WAAtB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,gBAAT,EAA2BC,qBAA3B,EAAkDC,mBAAlD,EAAuEC,gBAAvE,QAA+F,SAA/F,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEA,OAAO,SAASC,WAAT,OAQqB;EAAA;;EAAA;;EAAA,IARO;IACjCC,KADiC;IAEjCC,YAFiC;IAGjCC,QAAQ,EAAEC,gBAHuB;IAIjCC,KAJiC;IAKjCC,SALiC;IAMjCC,SANiC;IAOjCC;EAPiC,CAQP;EAC1B,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoChB,QAAQ,CAAeQ,YAAf,aAAeA,YAAf,cAAeA,YAAf,GAA+B,IAA/B,CAAlD;EACA,MAAM,CAACS,gBAAD,EAAmBC,mBAAnB,IAA0ClB,QAAQ,CAAmB;IACzEmB,GAAG,EAAE,CADoE;IAEzEC,IAAI,EAAE;EAFmE,CAAnB,CAAxD;EAIA,MAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCtB,QAAQ,CAAC,KAAD,CAApD;EAEA,MAAMS,QAAQ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"},"metadata":{},"sourceType":"module"}
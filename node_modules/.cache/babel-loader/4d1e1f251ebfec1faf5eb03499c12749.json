{"ast":null,"code":"// import Downshift from \"downshift\"\n// import { useCallback, useState , useEffect} from \"react\"\n// import classNames from \"classnames\"\n// import { DropdownPosition, GetDropdownPositionFn, InputSelectOnChange, InputSelectProps } from \"./types\"\n// export function InputSelect<TItem>({\n//   label,\n//   defaultValue,\n//   onChange: consumerOnChange,\n//   items,\n//   parseItem,\n//   isLoading,\n//   loadingLabel,\n// }: InputSelectProps<TItem>) {\n//   const [selectedValue, setSelectedValue] = useState<TItem | null>(defaultValue ?? null)\n//   const [dropdownPosition, setDropdownPosition] = useState<DropdownPosition>({\n//     top: 0,\n//     left: 0,\n//   })\n//   const onChange = useCallback<InputSelectOnChange<TItem>>(\n//     (selectedItem) => {\n//       if (selectedItem === null) {\n//         return\n//       }\n//       consumerOnChange(selectedItem)\n//       setSelectedValue(selectedItem)\n//     },\n//     [consumerOnChange]\n//   )\n//   return (\n//     <Downshift<TItem>\n//       id=\"RampSelect\"\n//       onChange={onChange}\n//       selectedItem={selectedValue}\n//       itemToString={(item) => (item ? parseItem(item).label : \"\")}\n//     >\n//       {({\n//         getItemProps,\n//         getLabelProps,\n//         getMenuProps,\n//         isOpen,\n//         highlightedIndex,\n//         selectedItem,\n//         getToggleButtonProps,\n//         inputValue,\n//       }) => {\n//         const toggleProps = getToggleButtonProps()\n//         const parsedSelectedItem = selectedItem === null ? null : parseItem(selectedItem)\n//         return (\n//           <div className=\"RampInputSelect--root\">\n//             <label className=\"RampText--s RampText--hushed\" {...getLabelProps()}>\n//               {label}\n//             </label>\n//             <div className=\"RampBreak--xs\" />\n//             <div\n//               className=\"RampInputSelect--input\"\n//               onClick={(event) => {\n//                 setDropdownPosition(getDropdownPosition(event.target))\n//                 toggleProps.onClick(event)\n//               }}\n//             >\n//               {inputValue}\n//             </div>\n//             <div\n//               className={classNames(\"RampInputSelect--dropdown-container\", {\n//                 \"RampInputSelect--dropdown-container-opened\": isOpen,\n//               })}\n//               {...getMenuProps()}\n//               style={{ top: dropdownPosition.top, left: dropdownPosition.left }}\n//             >\n//               {renderItems()}\n//             </div>\n//           </div>\n//         )\n//         function renderItems() {\n//           if (!isOpen) {\n//             return null\n//           }\n//           if (isLoading) {\n//             return <div className=\"RampInputSelect--dropdown-item\">{loadingLabel}...</div>\n//           }\n//           if (items.length === 0) {\n//             return <div className=\"RampInputSelect--dropdown-item\">No items</div>\n//           }\n//           return items.map((item, index) => {\n//             const parsedItem = parseItem(item)\n//             return (\n//               <div\n//                 key={parsedItem.value}\n//                 {...getItemProps({\n//                   key: parsedItem.value,\n//                   index,\n//                   item,\n//                   className: classNames(\"RampInputSelect--dropdown-item\", {\n//                     \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n//                     \"RampInputSelect--dropdown-item-selected\":\n//                       parsedSelectedItem?.value === parsedItem.value,\n//                   }),\n//                 })}\n//               >\n//                 {parsedItem.label}\n//               </div>\n//             )\n//           })\n//         }\n//       }}\n//     </Downshift>\n//   )\n// }\n// const getDropdownPosition: GetDropdownPositionFn = (target) => {\n//   if (target instanceof Element) {\n//     const { top, left } = target.getBoundingClientRect()\n//     const { scrollY } = window\n//     return {\n//       top: scrollY + top + 63,\n//       left,\n//     }\n//   }\n//   return { top: 0, left: 0 }\n// }","map":{"version":3,"names":[],"sources":["/Users/shahlahassan/Downloads/ramp-fe-challenge 2/src/components/InputSelect/index.tsx"],"sourcesContent":["// import Downshift from \"downshift\"\n// import { useCallback, useState , useEffect} from \"react\"\n// import classNames from \"classnames\"\n// import { DropdownPosition, GetDropdownPositionFn, InputSelectOnChange, InputSelectProps } from \"./types\"\n\n// export function InputSelect<TItem>({\n//   label,\n//   defaultValue,\n//   onChange: consumerOnChange,\n//   items,\n//   parseItem,\n//   isLoading,\n//   loadingLabel,\n// }: InputSelectProps<TItem>) {\n//   const [selectedValue, setSelectedValue] = useState<TItem | null>(defaultValue ?? null)\n//   const [dropdownPosition, setDropdownPosition] = useState<DropdownPosition>({\n//     top: 0,\n//     left: 0,\n//   })\n\n//   const onChange = useCallback<InputSelectOnChange<TItem>>(\n//     (selectedItem) => {\n//       if (selectedItem === null) {\n//         return\n//       }\n\n//       consumerOnChange(selectedItem)\n//       setSelectedValue(selectedItem)\n//     },\n//     [consumerOnChange]\n//   )\n\n//   return (\n//     <Downshift<TItem>\n//       id=\"RampSelect\"\n//       onChange={onChange}\n//       selectedItem={selectedValue}\n//       itemToString={(item) => (item ? parseItem(item).label : \"\")}\n//     >\n//       {({\n//         getItemProps,\n//         getLabelProps,\n//         getMenuProps,\n//         isOpen,\n//         highlightedIndex,\n//         selectedItem,\n//         getToggleButtonProps,\n//         inputValue,\n//       }) => {\n//         const toggleProps = getToggleButtonProps()\n//         const parsedSelectedItem = selectedItem === null ? null : parseItem(selectedItem)\n\n//         return (\n//           <div className=\"RampInputSelect--root\">\n//             <label className=\"RampText--s RampText--hushed\" {...getLabelProps()}>\n//               {label}\n//             </label>\n//             <div className=\"RampBreak--xs\" />\n//             <div\n//               className=\"RampInputSelect--input\"\n//               onClick={(event) => {\n//                 setDropdownPosition(getDropdownPosition(event.target))\n//                 toggleProps.onClick(event)\n//               }}\n//             >\n//               {inputValue}\n//             </div>\n\n//             <div\n//               className={classNames(\"RampInputSelect--dropdown-container\", {\n//                 \"RampInputSelect--dropdown-container-opened\": isOpen,\n//               })}\n//               {...getMenuProps()}\n//               style={{ top: dropdownPosition.top, left: dropdownPosition.left }}\n//             >\n//               {renderItems()}\n//             </div>\n//           </div>\n//         )\n\n//         function renderItems() {\n//           if (!isOpen) {\n//             return null\n//           }\n\n//           if (isLoading) {\n//             return <div className=\"RampInputSelect--dropdown-item\">{loadingLabel}...</div>\n//           }\n\n//           if (items.length === 0) {\n//             return <div className=\"RampInputSelect--dropdown-item\">No items</div>\n//           }\n\n//           return items.map((item, index) => {\n//             const parsedItem = parseItem(item)\n//             return (\n//               <div\n//                 key={parsedItem.value}\n//                 {...getItemProps({\n//                   key: parsedItem.value,\n//                   index,\n//                   item,\n//                   className: classNames(\"RampInputSelect--dropdown-item\", {\n//                     \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n//                     \"RampInputSelect--dropdown-item-selected\":\n//                       parsedSelectedItem?.value === parsedItem.value,\n//                   }),\n//                 })}\n//               >\n//                 {parsedItem.label}\n//               </div>\n//             )\n//           })\n//         }\n//       }}\n//     </Downshift>\n//   )\n// }\n\n// const getDropdownPosition: GetDropdownPositionFn = (target) => {\n//   if (target instanceof Element) {\n//     const { top, left } = target.getBoundingClientRect()\n//     const { scrollY } = window\n//     return {\n//       top: scrollY + top + 63,\n//       left,\n//     }\n//   }\n\n//   return { top: 0, left: 0 }\n// }\n\n"],"mappings},"metadata":{},"sourceType":"module"}
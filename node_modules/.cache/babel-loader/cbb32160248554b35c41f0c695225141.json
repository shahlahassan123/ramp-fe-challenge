{"ast":null,"code":"var _jsxFileName = \"/Users/shahlahassan/Downloads/ramp-fe-challenge 2/src/components/Transactions/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\";\nimport { TransactionPane } from \"./TransactionPane\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Transactions = _ref => {\n  _s();\n\n  let {\n    transactions\n  } = _ref;\n  const {\n    fetchWithoutCache,\n    loading\n  } = useCustomFetch();\n  const [updatedTransactions, setUpdatedTransactions] = useState(new Map()); // Set the approval status of a transaction\n\n  const setTransactionApproval = useCallback(async _ref2 => {\n    let {\n      transactionId,\n      newValue\n    } = _ref2;\n    await fetchWithoutCache(\"setTransactionApproval\", {\n      transactionId,\n      value: newValue\n    });\n    setUpdatedTransactions(prev => new Map(prev).set(transactionId, newValue));\n  }, [fetchWithoutCache]);\n\n  if (transactions === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampLoading--container\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 12\n    }, this);\n  } // Get the approval state of a transaction, considering local updates\n\n\n  const getApprovalState = transaction => {\n    return updatedTransactions.has(transaction.id) ? updatedTransactions.get(transaction.id) : transaction.approved;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": \"transaction-container\",\n    children: transactions.map(transaction => /*#__PURE__*/_jsxDEV(TransactionPane, {\n      transaction: { ...transaction,\n        approved: getApprovalState(transaction)\n      },\n      loading: loading,\n      setTransactionApproval: setTransactionApproval\n    }, transaction.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Transactions, \"DVUf/do9bXklxdH13QKc0F18Uzg=\", false, function () {\n  return [useCustomFetch];\n});\n\n_c = Transactions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["useCallback","useState","useCustomFetch","TransactionPane","Transactions","transactions","fetchWithoutCache","loading","updatedTransactions","setUpdatedTransactions","Map","setTransactionApproval","transactionId","newValue","value","prev","set","getApprovalState","transaction","has","id","get","approved","map"],"sources":["/Users/shahlahassan/Downloads/ramp-fe-challenge 2/src/components/Transactions/index.tsx"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\"\nimport { SetTransactionApprovalParams, Transaction } from \"src/utils/types\"\nimport { TransactionPane } from \"./TransactionPane\"\nimport { SetTransactionApprovalFunction, TransactionsComponent } from \"./types\"\n\nexport const Transactions: TransactionsComponent = ({ transactions }) => {\n  const { fetchWithoutCache, loading } = useCustomFetch()\n  const [updatedTransactions, setUpdatedTransactions] = useState(new Map<string, boolean>())\n\n   // Set the approval status of a transaction\n  const setTransactionApproval = useCallback<SetTransactionApprovalFunction>(\n    async ({ transactionId, newValue }) => {\n      await fetchWithoutCache<void, SetTransactionApprovalParams>(\"setTransactionApproval\", {\n        transactionId,\n        value: newValue,\n      })\n      setUpdatedTransactions((prev) => new Map(prev).set(transactionId, newValue))\n    },\n    [fetchWithoutCache]\n  )\n\n  if (transactions === null) {\n    return <div className=\"RampLoading--container\">Loading...</div>\n  }\n\n\n  // Get the approval state of a transaction, considering local updates\n  const getApprovalState = (transaction: Transaction) => {\n    return updatedTransactions.has(transaction.id)\n      ? updatedTransactions.get(transaction.id)!\n      : transaction.approved\n  }\n\n  return (\n    <div data-testid=\"transaction-container\">\n      {transactions.map((transaction) => (\n        <TransactionPane\n          key={transaction.id}\n          transaction={{ ...transaction, approved: getApprovalState(transaction) }}\n          loading={loading}\n          setTransactionApproval={setTransactionApproval}\n        />\n      ))}\n    </div>\n  )\n}\n"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,cAAT,QAA+B,0BAA/B;AAEA,SAASC,eAAT,QAAgC,mBAAhC;;AAGA,OAAO,MAAMC,YAAmC,GAAG,QAAsB;EAAA;;EAAA,IAArB;IAAEC;EAAF,CAAqB;EACvE,MAAM;IAAEC,iBAAF;IAAqBC;EAArB,IAAiCL,cAAc,EAArD;EACA,MAAM,CAACM,mBAAD,EAAsBC,sBAAtB,IAAgDR,QAAQ,CAAC,IAAIS,GAAJ,EAAD,CAA9D,CAFuE,CAItE;;EACD,MAAMC,sBAAsB,GAAGX,WAAW,CACxC,eAAuC;IAAA,IAAhC;MAAEY,aAAF;MAAiBC;IAAjB,CAAgC;IACrC,MAAMP,iBAAiB,CAAqC,wBAArC,EAA+D;MACpFM,aADoF;MAEpFE,KAAK,EAAED;IAF6E,CAA/D,CAAvB;IAIAJ,sBAAsB,CAAEM,IAAD,IAAU,IAAIL,GAAJ,CAAQK,IAAR,EAAcC,GAAd,CAAkBJ,aAAlB,EAAiCC,QAAjC,CAAX,CAAtB;EACD,CAPuC,EAQxC,CAACP,iBAAD,CARwC,CAA1C;;EAWA,IAAID,YAAY,KAAK,IAArB,EAA2B;IACzB,oBAAO;MAAK,SAAS,EAAC,wBAAf;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD,CAlBsE,CAqBvE;;;EACA,MAAMY,gBAAgB,GAAIC,WAAD,IAA8B;IACrD,OAAOV,mBAAmB,CAACW,GAApB,CAAwBD,WAAW,CAACE,EAApC,IACHZ,mBAAmB,CAACa,GAApB,CAAwBH,WAAW,CAACE,EAApC,CADG,GAEHF,WAAW,CAACI,QAFhB;EAGD,CAJD;;EAMA,oBACE;IAAK,eAAY,uBAAjB;IAAA,UACGjB,YAAY,CAACkB,GAAb,CAAkBL,WAAD,iBAChB,QAAC,eAAD;MAEE,WAAW,EAAE,EAAE,GAAGA,WAAL;QAAkBI,QAAQ,EAAEL,gBAAgB,CAACC,WAAD;MAA5C,CAFf;MAGE,OAAO,EAAEX,OAHX;MAIE,sBAAsB,EAAEI;IAJ1B,GACOO,WAAW,CAACE,EADnB;MAAA;MAAA;MAAA;IAAA,QADD;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAYD,CAxCM;;GAAMhB,Y;UAC4BF,c;;;KAD5BE,Y"},"metadata":{},"sourceType":"module"}
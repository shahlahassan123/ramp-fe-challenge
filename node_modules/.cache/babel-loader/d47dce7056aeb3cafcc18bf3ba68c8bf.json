{"ast":null,"code":"var _jsxFileName = \"/Users/shahlahassan/Downloads/ramp-fe-challenge 2/src/App.tsx\",\n    _s = $RefreshSig$();\n\n// import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\n// import { InputSelect } from \"./components/InputSelect\"\n// import { Instructions } from \"./components/Instructions\"\n// import { Transactions } from \"./components/Transactions\"\n// import { useEmployees } from \"./hooks/useEmployees\"\n// import { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\n// import { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\n// import { EMPTY_EMPLOYEE } from \"./utils/constants\"\n// import { Employee } from \"./utils/types\"\n// export function App() {\n//   const { data: employees, ...employeeUtils } = useEmployees()\n//   const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n//   const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n//   const [isLoading, setIsLoading] = useState(false)\n//   const transactions = useMemo(\n//     () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n//     [paginatedTransactions, transactionsByEmployee]\n//   )\n//   const loadAllTransactions = useCallback(async () => {\n//     setIsLoading(true)\n//     transactionsByEmployeeUtils.invalidateData()\n//     await employeeUtils.fetchAll()\n//     await paginatedTransactionsUtils.fetchAll()\n//     setIsLoading(false)\n//   }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n//   const loadTransactionsByEmployee = useCallback(\n//     async (employeeId: string) => {\n//       paginatedTransactionsUtils.invalidateData()\n//       await transactionsByEmployeeUtils.fetchById(employeeId)\n//     },\n//     [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n//   )\n//   useEffect(() => {\n//     if (employees === null && !employeeUtils.loading) {\n//       loadAllTransactions()\n//     }\n//   }, [employeeUtils.loading, employees, loadAllTransactions])\n//   return (\n//     <Fragment>\n//       <main className=\"MainContainer\">\n//         <Instructions />\n//         <hr className=\"RampBreak--l\" />\n//         <InputSelect<Employee>\n//           isLoading={isLoading}\n//           defaultValue={EMPTY_EMPLOYEE}\n//           items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n//           label=\"Filter by employee\"\n//           loadingLabel=\"Loading employees\"\n//           parseItem={(item) => ({\n//             value: item.id,\n//             label: item === EMPTY_EMPLOYEE ? \"All Employees\" : `${item.firstName} ${item.lastName}`,\n//           })}\n//           onChange={async (newValue) => {\n//             if (newValue === null || newValue === EMPTY_EMPLOYEE) {\n//               await loadAllTransactions()\n//             } else {\n//               await loadTransactionsByEmployee(newValue.id)\n//             }\n//           }}\n//         />\n//         <div className=\"RampBreak--l\" />\n//         <div className=\"RampGrid\">\n//           <Transactions transactions={transactions} />\n//           {transactions !== null && (\n//             <button\n//               className=\"RampButton\"\n//               disabled={paginatedTransactionsUtils.loading}\n//               onClick={async () => {\n//                 await paginatedTransactionsUtils.fetchAll()\n//               }}\n//             >\n//               View More\n//             </button>\n//           )}\n//         </div>\n//       </main>\n//     </Fragment>\n//   )\n// }\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isFiltered, setIsFiltered] = useState(false);\n  const [localTransactions, setLocalTransactions] = useState([]);\n  const transactions = useMemo(() => {\n    if (isFiltered) {\n      var _transactionsByEmploy;\n\n      return (_transactionsByEmploy = transactionsByEmployee === null || transactionsByEmployee === void 0 ? void 0 : transactionsByEmployee.map(tx => ({ ...tx,\n        ...localTransactions.find(ltx => ltx.id === tx.id)\n      }))) !== null && _transactionsByEmploy !== void 0 ? _transactionsByEmploy : null;\n    } else {\n      var _paginatedTransaction;\n\n      return (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data.map(tx => ({ ...tx,\n        ...localTransactions.find(ltx => ltx.id === tx.id)\n      }))) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : null;\n    }\n  }, [paginatedTransactions, transactionsByEmployee, isFiltered, localTransactions]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    setIsFiltered(false);\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    setIsFiltered(true);\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const handleApprovalChange = useCallback((transactionId, newValue) => {\n    setLocalTransactions(prev => {\n      const existingTransaction = prev.find(tx => tx.id === transactionId);\n\n      if (existingTransaction) {\n        return prev.map(tx => tx.id === transactionId ? { ...tx,\n          approved: newValue\n        } : tx);\n      } else {\n        return [...prev, {\n          id: transactionId,\n          approved: newValue\n        }];\n      }\n    });\n  }, []);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: item === EMPTY_EMPLOYEE ? \"All Employees\" : `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null || newValue === EMPTY_EMPLOYEE) {\n            await loadAllTransactions();\n          } else {\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions,\n          onApprovalChange: handleApprovalChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), transactions !== null && !isFiltered && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await paginatedTransactionsUtils.fetchAll();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"UWOtaHK5ZmQzpZbLe9tprzr/4SM=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","isFiltered","setIsFiltered","localTransactions","setLocalTransactions","transactions","map","tx","find","ltx","id","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","handleApprovalChange","transactionId","newValue","prev","existingTransaction","approved","loading","item","value","label","firstName","lastName","nextPage"],"sources":["/Users/shahlahassan/Downloads/ramp-fe-challenge 2/src/App.tsx"],"sourcesContent":["\n// import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\n// import { InputSelect } from \"./components/InputSelect\"\n// import { Instructions } from \"./components/Instructions\"\n// import { Transactions } from \"./components/Transactions\"\n// import { useEmployees } from \"./hooks/useEmployees\"\n// import { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\n// import { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\n// import { EMPTY_EMPLOYEE } from \"./utils/constants\"\n// import { Employee } from \"./utils/types\"\n\n// export function App() {\n//   const { data: employees, ...employeeUtils } = useEmployees()\n//   const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n//   const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n//   const [isLoading, setIsLoading] = useState(false)\n\n//   const transactions = useMemo(\n//     () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n//     [paginatedTransactions, transactionsByEmployee]\n//   )\n\n//   const loadAllTransactions = useCallback(async () => {\n//     setIsLoading(true)\n//     transactionsByEmployeeUtils.invalidateData()\n\n//     await employeeUtils.fetchAll()\n//     await paginatedTransactionsUtils.fetchAll()\n\n//     setIsLoading(false)\n//   }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n//   const loadTransactionsByEmployee = useCallback(\n//     async (employeeId: string) => {\n//       paginatedTransactionsUtils.invalidateData()\n//       await transactionsByEmployeeUtils.fetchById(employeeId)\n//     },\n//     [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n//   )\n\n//   useEffect(() => {\n//     if (employees === null && !employeeUtils.loading) {\n//       loadAllTransactions()\n//     }\n//   }, [employeeUtils.loading, employees, loadAllTransactions])\n\n//   return (\n//     <Fragment>\n//       <main className=\"MainContainer\">\n//         <Instructions />\n\n//         <hr className=\"RampBreak--l\" />\n\n//         <InputSelect<Employee>\n//           isLoading={isLoading}\n//           defaultValue={EMPTY_EMPLOYEE}\n//           items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n//           label=\"Filter by employee\"\n//           loadingLabel=\"Loading employees\"\n//           parseItem={(item) => ({\n//             value: item.id,\n//             label: item === EMPTY_EMPLOYEE ? \"All Employees\" : `${item.firstName} ${item.lastName}`,\n//           })}\n//           onChange={async (newValue) => {\n//             if (newValue === null || newValue === EMPTY_EMPLOYEE) {\n//               await loadAllTransactions()\n//             } else {\n//               await loadTransactionsByEmployee(newValue.id)\n//             }\n//           }}\n//         />\n\n//         <div className=\"RampBreak--l\" />\n\n//         <div className=\"RampGrid\">\n//           <Transactions transactions={transactions} />\n\n//           {transactions !== null && (\n//             <button\n//               className=\"RampButton\"\n//               disabled={paginatedTransactionsUtils.loading}\n//               onClick={async () => {\n//                 await paginatedTransactionsUtils.fetchAll()\n//               }}\n//             >\n//               View More\n//             </button>\n//           )}\n//         </div>\n//       </main>\n//     </Fragment>\n//   )\n// }\n\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee, Transaction } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n  const [isFiltered, setIsFiltered] = useState(false)\n  const [localTransactions, setLocalTransactions] = useState<Transaction[]>([])\n\n  const transactions = useMemo(\n    () => {\n      if (isFiltered) {\n        return transactionsByEmployee?.map(tx => ({\n          ...tx,\n          ...localTransactions.find(ltx => ltx.id === tx.id)\n        })) ?? null\n      } else {\n        return paginatedTransactions?.data.map(tx => ({\n          ...tx,\n          ...localTransactions.find(ltx => ltx.id === tx.id)\n        })) ?? null\n      }\n    },\n    [paginatedTransactions, transactionsByEmployee, isFiltered, localTransactions]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    transactionsByEmployeeUtils.invalidateData()\n    setIsFiltered(false)\n\n    await employeeUtils.fetchAll()\n    await paginatedTransactionsUtils.fetchAll()\n\n    setIsLoading(false)\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      setIsFiltered(true)\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  const handleApprovalChange = useCallback((transactionId: string, newValue: boolean) => {\n    setLocalTransactions(prev => {\n      const existingTransaction = prev.find(tx => tx.id === transactionId)\n      if (existingTransaction) {\n        return prev.map(tx => tx.id === transactionId ? { ...tx, approved: newValue } : tx)\n      } else {\n        return [...prev, { id: transactionId, approved: newValue } as Transaction]\n      }\n    })\n  }, [])\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: item === EMPTY_EMPLOYEE ? \"All Employees\" : `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null || newValue === EMPTY_EMPLOYEE) {\n              await loadAllTransactions()\n            } else {\n              await loadTransactionsByEmployee(newValue.id)\n            }\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} onApprovalChange={handleApprovalChange} />\n\n          {transactions !== null && !isFiltered && paginatedTransactions?.nextPage !== null && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await paginatedTransactionsUtils.fetchAll()\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":";;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,SAAhC,EAA2CC,OAA3C,EAAoDC,QAApD,QAAoE,OAApE;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,SAASC,wBAAT,QAAyC,kCAAzC;AACA,SAASC,yBAAT,QAA0C,mCAA1C;AACA,SAASC,cAAT,QAA+B,mBAA/B;;AAGA,OAAO,SAASC,GAAT,GAAe;EAAA;;EACpB,MAAM;IAAEC,IAAI,EAAEC,SAAR;IAAmB,GAAGC;EAAtB,IAAwCP,YAAY,EAA1D;EACA,MAAM;IAAEK,IAAI,EAAEG,qBAAR;IAA+B,GAAGC;EAAlC,IAAiER,wBAAwB,EAA/F;EACA,MAAM;IAAEI,IAAI,EAAEK,sBAAR;IAAgC,GAAGC;EAAnC,IAAmET,yBAAyB,EAAlG;EACA,MAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAACkB,UAAD,EAAaC,aAAb,IAA8BnB,QAAQ,CAAC,KAAD,CAA5C;EACA,MAAM,CAACoB,iBAAD,EAAoBC,oBAApB,IAA4CrB,QAAQ,CAAgB,EAAhB,CAA1D;EAEA,MAAMsB,YAAY,GAAGvB,OAAO,CAC1B,MAAM;IACJ,IAAImB,UAAJ,EAAgB;MAAA;;MACd,gCAAOJ,sBAAP,aAAOA,sBAAP,uBAAOA,sBAAsB,CAAES,GAAxB,CAA4BC,EAAE,KAAK,EACxC,GAAGA,EADqC;QAExC,GAAGJ,iBAAiB,CAACK,IAAlB,CAAuBC,GAAG,IAAIA,GAAG,CAACC,EAAJ,KAAWH,EAAE,CAACG,EAA5C;MAFqC,CAAL,CAA9B,CAAP,yEAGO,IAHP;IAID,CALD,MAKO;MAAA;;MACL,gCAAOf,qBAAP,aAAOA,qBAAP,uBAAOA,qBAAqB,CAAEH,IAAvB,CAA4Bc,GAA5B,CAAgCC,EAAE,KAAK,EAC5C,GAAGA,EADyC;QAE5C,GAAGJ,iBAAiB,CAACK,IAAlB,CAAuBC,GAAG,IAAIA,GAAG,CAACC,EAAJ,KAAWH,EAAE,CAACG,EAA5C;MAFyC,CAAL,CAAlC,CAAP,yEAGO,IAHP;IAID;EACF,CAbyB,EAc1B,CAACf,qBAAD,EAAwBE,sBAAxB,EAAgDI,UAAhD,EAA4DE,iBAA5D,CAd0B,CAA5B;EAiBA,MAAMQ,mBAAmB,GAAG/B,WAAW,CAAC,YAAY;IAClDoB,YAAY,CAAC,IAAD,CAAZ;IACAF,2BAA2B,CAACc,cAA5B;IACAV,aAAa,CAAC,KAAD,CAAb;IAEA,MAAMR,aAAa,CAACmB,QAAd,EAAN;IACA,MAAMjB,0BAA0B,CAACiB,QAA3B,EAAN;IAEAb,YAAY,CAAC,KAAD,CAAZ;EACD,CATsC,EASpC,CAACN,aAAD,EAAgBE,0BAAhB,EAA4CE,2BAA5C,CAToC,CAAvC;EAWA,MAAMgB,0BAA0B,GAAGlC,WAAW,CAC5C,MAAOmC,UAAP,IAA8B;IAC5BnB,0BAA0B,CAACgB,cAA3B;IACAV,aAAa,CAAC,IAAD,CAAb;IACA,MAAMJ,2BAA2B,CAACkB,SAA5B,CAAsCD,UAAtC,CAAN;EACD,CAL2C,EAM5C,CAACnB,0BAAD,EAA6BE,2BAA7B,CAN4C,CAA9C;EASA,MAAMmB,oBAAoB,GAAGrC,WAAW,CAAC,CAACsC,aAAD,EAAwBC,QAAxB,KAA8C;IACrFf,oBAAoB,CAACgB,IAAI,IAAI;MAC3B,MAAMC,mBAAmB,GAAGD,IAAI,CAACZ,IAAL,CAAUD,EAAE,IAAIA,EAAE,CAACG,EAAH,KAAUQ,aAA1B,CAA5B;;MACA,IAAIG,mBAAJ,EAAyB;QACvB,OAAOD,IAAI,CAACd,GAAL,CAASC,EAAE,IAAIA,EAAE,CAACG,EAAH,KAAUQ,aAAV,GAA0B,EAAE,GAAGX,EAAL;UAASe,QAAQ,EAAEH;QAAnB,CAA1B,GAA0DZ,EAAzE,CAAP;MACD,CAFD,MAEO;QACL,OAAO,CAAC,GAAGa,IAAJ,EAAU;UAAEV,EAAE,EAAEQ,aAAN;UAAqBI,QAAQ,EAAEH;QAA/B,CAAV,CAAP;MACD;IACF,CAPmB,CAApB;EAQD,CATuC,EASrC,EATqC,CAAxC;EAWAtC,SAAS,CAAC,MAAM;IACd,IAAIY,SAAS,KAAK,IAAd,IAAsB,CAACC,aAAa,CAAC6B,OAAzC,EAAkD;MAChDZ,mBAAmB;IACpB;EACF,CAJQ,EAIN,CAACjB,aAAa,CAAC6B,OAAf,EAAwB9B,SAAxB,EAAmCkB,mBAAnC,CAJM,CAAT;EAMA,oBACE,QAAC,QAAD;IAAA,uBACE;MAAM,SAAS,EAAC,eAAhB;MAAA,wBACE,QAAC,YAAD;QAAA;QAAA;QAAA;MAAA,QADF,eAGE;QAAI,SAAS,EAAC;MAAd;QAAA;QAAA;QAAA;MAAA,QAHF,eAKE,QAAC,WAAD;QACE,SAAS,EAAEZ,SADb;QAEE,YAAY,EAAET,cAFhB;QAGE,KAAK,EAAEG,SAAS,KAAK,IAAd,GAAqB,EAArB,GAA0B,CAACH,cAAD,EAAiB,GAAGG,SAApB,CAHnC;QAIE,KAAK,EAAC,oBAJR;QAKE,YAAY,EAAC,mBALf;QAME,SAAS,EAAG+B,IAAD,KAAW;UACpBC,KAAK,EAAED,IAAI,CAACd,EADQ;UAEpBgB,KAAK,EAAEF,IAAI,KAAKlC,cAAT,GAA0B,eAA1B,GAA6C,GAAEkC,IAAI,CAACG,SAAU,IAAGH,IAAI,CAACI,QAAS;QAFlE,CAAX,CANb;QAUE,QAAQ,EAAE,MAAOT,QAAP,IAAoB;UAC5B,IAAIA,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK7B,cAAtC,EAAsD;YACpD,MAAMqB,mBAAmB,EAAzB;UACD,CAFD,MAEO;YACL,MAAMG,0BAA0B,CAACK,QAAQ,CAACT,EAAV,CAAhC;UACD;QACF;MAhBH;QAAA;QAAA;QAAA;MAAA,QALF,eAwBE;QAAK,SAAS,EAAC;MAAf;QAAA;QAAA;QAAA;MAAA,QAxBF,eA0BE;QAAK,SAAS,EAAC,UAAf;QAAA,wBACE,QAAC,YAAD;UAAc,YAAY,EAAEL,YAA5B;UAA0C,gBAAgB,EAAEY;QAA5D;UAAA;UAAA;UAAA;QAAA,QADF,EAGGZ,YAAY,KAAK,IAAjB,IAAyB,CAACJ,UAA1B,IAAwC,CAAAN,qBAAqB,SAArB,IAAAA,qBAAqB,WAArB,YAAAA,qBAAqB,CAAEkC,QAAvB,MAAoC,IAA5E,iBACC;UACE,SAAS,EAAC,YADZ;UAEE,QAAQ,EAAEjC,0BAA0B,CAAC2B,OAFvC;UAGE,OAAO,EAAE,YAAY;YACnB,MAAM3B,0BAA0B,CAACiB,QAA3B,EAAN;UACD,CALH;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAJJ;MAAA;QAAA;QAAA;QAAA;MAAA,QA1BF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AA8CD;;GA5GetB,G;UACgCJ,Y,EACyBC,wB,EACEC,yB;;;KAH3DE,G"},"metadata":{},"sourceType":"module"}
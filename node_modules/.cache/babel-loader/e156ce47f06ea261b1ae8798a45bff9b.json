{"ast":null,"code":"var _s = $RefreshSig$();\n\n// import { useCallback, useState } from \"react\"\n// import { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\n// import { PaginatedTransactionsResult } from \"./types\"\n// import { useCustomFetch } from \"./useCustomFetch\"\n// export function usePaginatedTransactions(): PaginatedTransactionsResult {\n//   const { fetchWithCache, loading } = useCustomFetch()\n//   const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n//     Transaction[]\n//   > | null>(null)\n//   const fetchAll = useCallback(async () => {\n//     const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n//       \"paginatedTransactions\",\n//       {\n//         page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n//       }\n//     )\n//     setPaginatedTransactions((previousResponse) => {\n//       if (response === null) {\n//         return previousResponse\n//       }\n//       if (previousResponse === null) {\n//         return response\n//       }\n//       return { \n//         data: [...previousResponse.data, ...response.data], \n//         nextPage: response.nextPage \n//       }\n//     })\n//   }, [fetchWithCache, paginatedTransactions])\n//   const invalidateData = useCallback(() => {\n//     setPaginatedTransactions(null)\n//   }, [])\n//   return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n// }\n//WORKING\n// import { useCallback, useState } from \"react\"\n// import { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\n// import { PaginatedTransactionsResult } from \"./types\"\n// import { useCustomFetch } from \"./useCustomFetch\"\n// export function usePaginatedTransactions(): PaginatedTransactionsResult {\n//   const { fetchWithCache, loading } = useCustomFetch()\n//   const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n//     Transaction[]\n//   > | null>(null)\n//   const fetchAll = useCallback(async () => {\n//     const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n//       \"paginatedTransactions\",\n//       {\n//         page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n//       }\n//     )\n//     setPaginatedTransactions((previousResponse) => {\n//       if (response === null) {\n//         return previousResponse\n//       }\n//       if (previousResponse === null) {\n//         return response\n//       }\n//       return { \n//         data: [...previousResponse.data, ...response.data], \n//         nextPage: response.nextPage \n//       }\n//     })\n//   }, [fetchWithCache, paginatedTransactions])\n//   const invalidateData = useCallback(() => {\n//     setPaginatedTransactions(null)\n//   }, [])\n//   return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n// }\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null) {\n        return previousResponse;\n      }\n\n      if (previousResponse === null) {\n        return response;\n      }\n\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"5C7xQHueO9nKLl+7c12EAAA+DoA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","response","page","nextPage","previousResponse","data","invalidateData"],"sources":["/Users/shahlahassan/Downloads/ramp-fe-challenge 2/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["// import { useCallback, useState } from \"react\"\n// import { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\n// import { PaginatedTransactionsResult } from \"./types\"\n// import { useCustomFetch } from \"./useCustomFetch\"\n\n// export function usePaginatedTransactions(): PaginatedTransactionsResult {\n//   const { fetchWithCache, loading } = useCustomFetch()\n//   const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n//     Transaction[]\n//   > | null>(null)\n\n//   const fetchAll = useCallback(async () => {\n//     const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n//       \"paginatedTransactions\",\n//       {\n//         page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n//       }\n//     )\n\n//     setPaginatedTransactions((previousResponse) => {\n//       if (response === null) {\n//         return previousResponse\n//       }\n\n//       if (previousResponse === null) {\n//         return response\n//       }\n\n//       return { \n//         data: [...previousResponse.data, ...response.data], \n//         nextPage: response.nextPage \n//       }\n//     })\n//   }, [fetchWithCache, paginatedTransactions])\n\n//   const invalidateData = useCallback(() => {\n//     setPaginatedTransactions(null)\n//   }, [])\n\n//   return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n// }\n\n//WORKING\n// import { useCallback, useState } from \"react\"\n// import { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\n// import { PaginatedTransactionsResult } from \"./types\"\n// import { useCustomFetch } from \"./useCustomFetch\"\n\n// export function usePaginatedTransactions(): PaginatedTransactionsResult {\n//   const { fetchWithCache, loading } = useCustomFetch()\n//   const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n//     Transaction[]\n//   > | null>(null)\n\n//   const fetchAll = useCallback(async () => {\n//     const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n//       \"paginatedTransactions\",\n//       {\n//         page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n//       }\n//     )\n\n//     setPaginatedTransactions((previousResponse) => {\n//       if (response === null) {\n//         return previousResponse\n//       }\n\n//       if (previousResponse === null) {\n//         return response\n//       }\n\n//       return { \n//         data: [...previousResponse.data, ...response.data], \n//         nextPage: response.nextPage \n//       }\n//     })\n//   }, [fetchWithCache, paginatedTransactions])\n\n//   const invalidateData = useCallback(() => {\n//     setPaginatedTransactions(null)\n//   }, [])\n\n//   return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n// }\n\nimport { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<Transaction[]> | null>(null)\n\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n      }\n    )\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null) {\n        return previousResponse\n      }\n\n      if (previousResponse === null) {\n        return response\n      }\n\n      return { \n        data: [...previousResponse.data, ...response.data], \n        nextPage: response.nextPage \n      }\n    })\n  }, [fetchWithCache, paginatedTransactions])\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAA0C,IAA1C,CAAlE;EAEA,MAAMO,QAAQ,GAAGR,WAAW,CAAC,YAAY;IACvC,MAAMS,QAAQ,GAAG,MAAML,cAAc,CACnC,uBADmC,EAEnC;MACEM,IAAI,EAAEJ,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACK;IADnE,CAFmC,CAArC;IAOAJ,wBAAwB,CAAEK,gBAAD,IAAsB;MAC7C,IAAIH,QAAQ,KAAK,IAAjB,EAAuB;QACrB,OAAOG,gBAAP;MACD;;MAED,IAAIA,gBAAgB,KAAK,IAAzB,EAA+B;QAC7B,OAAOH,QAAP;MACD;;MAED,OAAO;QACLI,IAAI,EAAE,CAAC,GAAGD,gBAAgB,CAACC,IAArB,EAA2B,GAAGJ,QAAQ,CAACI,IAAvC,CADD;QAELF,QAAQ,EAAEF,QAAQ,CAACE;MAFd,CAAP;IAID,CAbuB,CAAxB;EAcD,CAtB2B,EAsBzB,CAACP,cAAD,EAAiBE,qBAAjB,CAtByB,CAA5B;EAwBA,MAAMQ,cAAc,GAAGd,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEM,IAAI,EAAEP,qBAAR;IAA+BD,OAA/B;IAAwCG,QAAxC;IAAkDM;EAAlD,CAAP;AACD;;GAjCeX,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}